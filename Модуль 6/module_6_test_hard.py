# target = """Дополнительное практическое задание по модулю: "Наследование классов."
# Цель: Применить знания полученные в модуле, решив задачу повышенного уровня сложности
# Задание "Они все так похожи":
# 2D? 3D? Даже 4D?.... Настолько глубоко мы заходить конечно же не будем, 4D подождёт, но вот с двумерными и
# трёхмерными фигурами можем поэкспериментировать.
# Вы когда-нибудь задумывались как устроены графические библиотеки для языков программирования?
# Безусловно, там выполняются огромные расчёты при помощи вашей видеокарты, но... Что лежит в основе удобного
# использования таких объектов?
# По названию задачи можно понять, что все геометрические фигуры обладают схожими свойствами, такими как:
# длины сторон, цвет и др.
# Давайте попробуем реализовать простейшие классы для некоторых таких фигур и при этом применить наследование
# (в будущем, изучая сторонние библиотеки, вы будете замечать схожие классы, уже написанные кем-то ранее):
# Общее ТЗ:
# Реализовать классы Figure(родительский), Circle, Triangle и Cube, объекты которых будут обладать
# методами изменения размеров, цвета и т.д.
# Многие атрибуты и методы должны быть инкапсулированны и для них должны быть написаны интерфейсы
# взаимодействия (методы) - геттеры и сеттеры.
# Подробное ТЗ:
# Атрибуты класса Figure: sides_count = 0
# Каждый объект класса Figure должен обладать следующими атрибутами:
#     Атрибуты(инкапсулированные): __sides(список сторон (целые числа)), __color(список цветов в формате RGB)
#     Атрибуты(публичные): filled(закрашенный, bool)
# И методами:
#     Метод get_color, возвращает список RGB цветов.
#     Метод __is_valid_color - служебный, принимает параметры r, g, b, который проверяет корректность
#     переданных значений перед установкой нового цвета. Корректным цвет: все значения r, g и b - целые
#     числа в диапазоне от 0 до 255 (включительно).
#     Метод set_color принимает параметры r, g, b - числа и изменяет атрибут __color на соответствующие
#     значения, предварительно проверив их на корректность. Если введены некорректные данные, то цвет остаётся прежним.
#     Метод __is_valid_sides - служебный, принимает неограниченное кол-во сторон, возвращает True если
#     все стороны целые положительные числа и кол-во новых сторон совпадает с текущим, False - во всех остальных случаях.
#     Метод get_sides должен возвращать значение я атрибута __sides.
#     Метод __len__ должен возвращать периметр фигуры.
#     Метод set_sides(self, *new_sides) должен принимать новые стороны, если их количество не равно
#     sides_count, то не изменять, в противном случае - менять.
# Атрибуты класса Circle: sides_count = 1
# Каждый объект класса Circle должен обладать следующими атрибутами и методами:
#     Все атрибуты и методы класса Figure
#     Атрибут __radius, рассчитать исходя из длины окружности (одной единственной стороны).
#     Метод get_square возвращает площадь круга (можно рассчитать как через длину, так и через радиус).
# Атрибуты класса Triangle: sides_count = 3
# Каждый объект класса Triangle должен обладать следующими атрибутами и методами:
#     Все атрибуты и методы класса Figure
#     Метод get_square возвращает площадь треугольника. (можно рассчитать по формуле Герона)
# Атрибуты класса Cube: sides_count = 12
# Каждый объект класса Cube должен обладать следующими атрибутами и методами:
#     Все атрибуты и методы класса Figure.
#     Переопределить __sides сделав список из 12 одинаковы сторон (передаётся 1 сторона)
#     Метод get_volume, возвращает объём куба.
# ВАЖНО!
# При создании объектов делайте проверку на количество переданных сторон, если сторон
# не ровно sides_count, то создать массив с единичными сторонами и в том кол-ве, которое требует фигура.
# Пример 1: Circle((200, 200, 100), 10, 15, 6), т.к. сторона у круга всего 1, то его стороны будут - [1]
# Пример 2: Triangle((200, 200, 100), 10, 6), т.к. сторон у треугольника 3, то его стороны будут - [1, 1, 1]
# Пример 3: Cube((200, 200, 100), 9), т.к. сторон(рёбер) у куба - 12, то его стороны будут - [9, 9, 9, ....., 9] (12)
# Пример 4: Cube((200, 200, 100), 9, 12), т.к. сторон(рёбер) у куба - 12, то его стороны будут - [1, 1, 1, ....., 1]
# Код для проверки:
# circle1 = Circle((200, 200, 100), 10) # (Цвет, стороны)
# cube1 = Cube((222, 35, 130), 6)
# # Проверка на изменение цветов:
# circle1.set_color(55, 66, 77) # Изменится
# print(circle1.get_color())
# cube1.set_color(300, 70, 15) # Не изменится
# print(cube1.get_color())
# # Проверка на изменение сторон:
# cube1.set_sides(5, 3, 12, 4, 5) # Не изменится
# print(cube1.get_sides())
# circle1.set_sides(15) # Изменится
# print(circle1.get_sides())
# # Проверка периметра (круга), это и есть длина:
# print(len(circle1))
# # Проверка объёма (куба):
# print(cube1.get_volume())
# Выходные данные (консоль):
# [55, 66, 77]
# [222, 35, 130]
# [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]
# [15]
# 15
# 216
# Примечания (рекомендации):
#     Рекомендуется сделать дополнительные (свои проверки) работы методов объектов каждого класса.
#     Делайте каждый класс и метод последовательно и проверяйте работу каждой части отдельно.
#     Для проверки принадлежности к типу рекомендуется использовать функцию isinstance.
#     Помните, служебные инкапсулированные методы можно и нужно использовать только внутри текущего класса.
#     Вам не запрещается вводить дополнительные атрибуты и методы, творите, но не переборщите!"""

from math import pi


class Figure:
    sides_count: int = 0
    valid_sides = 0
    default_side = 1

    def __init__(self, *args):
        self.__color = list(args[0])
        self.__sides = [self.default_side] * self.sides_count
        self.set_sides(*args[1:])
        self.filled: bool = False

    def get_color(self):
        return list(self.__color)

    def __len__(self):
        return sum(self.__sides)

    def __is_valid_color(self, red: int, green: int, blue: int):
        for element in (red, green, blue):
            if not 0 <= element <= 255 and isinstance(element, int):
                return False
        return True

    def set_color(self, red: int, green: int, blue: int):
        if self.__is_valid_color(red, green, blue):
            self.__color = [red, green, blue]

    def __is_valid_sides(self, *sides):
        if not len(sides) == self.valid_sides:
            return False
        for element in list(sides):
            if not isinstance(element, int) and element > 0:
                return False
        return True

    def get_sides(self):
        return list(self.__sides)

    def set_sides(self, *new_sides):
        if self.__is_valid_sides(*new_sides):
            if self.sides_count == 12:
                self.__sides = list(new_sides) * self.sides_count
                return
            self.__sides = list(new_sides)


class Circle(Figure):
    sides_count = 1
    valid_sides = 1

    def __init__(self, *args):
        super().__init__(*args)
        self.__radius: float = self.get_sides()[0] / (2 * pi)  # в переменной сохраняется ОШИБОЧНОЕ значение!!!

    def get_square(self):
        s = pi * self.__radius ** 2
        return s


class Triangle(Figure):
    sides_count = 3
    valid_sides = 3

    def get_square(self):
        triangle_sides = self.get_sides()
        p = sum(triangle_sides)
        s = pow((p * (p - triangle_sides[0]) * (p - triangle_sides[1]) * (p - triangle_sides[2])), 0.5)
        return s


class Cube(Figure):
    sides_count = 12
    valid_sides = 1

    def __init__(self, *args):
        super().__init__(*args)

    def set_sides(self, *new_sides):
        new_sides_list = list(new_sides)
        if len(new_sides_list) == self.valid_sides:
            super().set_sides(*new_sides_list)

    def get_volume(self):
        cube_side = self.get_sides()
        return pow(cube_side[0], 3)


if __name__ == '__main__':
    circle1 = Circle((200, 200, 100), 10)  # (Цвет, стороны)
    cube1 = Cube((222, 35, 130), 6)

    # Проверка на изменение цветов:
    circle1.set_color(55, 66, 77)  # Изменится
    print(circle1.get_color())
    cube1.set_color(300, 70, 15)  # Не изменится
    print(cube1.get_color())
    # Проверка на изменение сторон:
    cube1.set_sides(5, 3, 12, 4, 5)  # Не изменится
    print(cube1.get_sides())
    circle1.set_sides(15)  # Изменится
    print(circle1.get_sides())
    # Проверка периметра (круга), это и есть длина:
    print(len(circle1))
    # Проверка объёма (куба):
    print(cube1.get_volume())
